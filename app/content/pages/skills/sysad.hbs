---
layout: skills.hbs
---
{{> skills-nav skills='1' sysad='1'}}

<div class="hyphenate">

  <main>

    <section id="landing">

      <article>
        <div class="with-chart">
          <div class="text">
            <h4>System Administration</h4>
            <p>
              I mainly use AWS. Being for the most part alone in both my personal endeavors and day job, the automations really help and the low costs really appeal to my colleagues.
            </p>
            <p>
              I am well acquainted with CentOS, I solely used private VPSs prior to using cloud solutions like Heroku and AWS. I have not touched a Windows machine in years, I am very comfortable in a Linux/Unix environment.
            </p>
            <p>
              This chart is ordered by my preference, and rated by my confidence in practical use. This does not reflect mastery. See second chart for AWS breakdown.
            </p>
          </div>
          <div class="chart ct-sysad ct-golden-section"></div>
        </div>


        <div class="with-chart">
          <div class="text">
            <h4>AWS</h4>
            <p>I use Elastic Beanstalk for Node instances. S3 to deploy frontend assets. And have used vanilla EC2 AMI instances to offload computing work from ELB/Heroku apps. Familiar with IAM and Security Groups, though only in Elastic Beanstalk and ElastiCache use-cases. Familiar with replica sets and load balancers for Redis provisions in ElastiCache.</p>
            <p>
              This chart shows my whole experience with AWS, the divisions show the use and attention I've given each service.
            </p>
          </div>
          <div class="chart ct-aws ct-golden-section"></div>
        </div>




        <div class="wrap">
          <div class="management experience">
            <h4>Experience</h4>

            <h5>SEOP Asia, Inc.</h5>

            <p>
              We've designed and implemented load balanced Nginx and MySQL servers that host approximately 80 Wordpress sites, that each cater to at most 100k pageviews each daily. These sites were required to share some Wordpress instances (a WP Multisite) and serve pages under 2 seconds. The challenge here was we were given only a month to deliver this, including the site builds and other assets.
            </p>
            <h6>Web Server</h6>
            <p>
              The Wordpress instances sit behind Pagespeed and Varnish cache on Nginx servers and are replicated behind a load balancer.
            </p>
            <h6>Database</h6>
            <p>
              MySQL databases are replicated behind a load balancer. SQL result sets are cached on the web servers with Memcached.
            </p>
            <h6>Caching</h6>
            <p>
              When the copywriters update the database, caches for the relevant Wordpress instance are invalidated in Varnish and Memcached. Caches are pre-rendered by "warming up" or loading the pages using a crawler.
            </p>

            <h5>Lilii</h5>
            <p>A convention-based markdown blogging platform that is managed through Dropbox.</p>
            <p>
              The app is minimal and runs on AWS Elastic Beanstalk configured to pre-scale up with increase traffic. The database is a provisioned MongoDB instance from MongoLabs. Page requests are cached with Redis on AWS ElastiCache.
            </p>

            <h5>Quart</h5>
            <p>A hosted markdown blogging platform and web-based text editor.</p>
            <p>
              The app runs on Heroku, the database is a provisioned MongoDB instance from MongoLabs. Grammar checking and language assist is offloaded to an EC2 instance running a Java web app and library.
            </p>

          </div>
        </div>
      </article>

      <script>
      var data = {
        labels: ['Elastic Beanstalk', 'EC2', 'S3', 'ElastiCache', 'Route 53', 'IAM'],
        series: [30, 20, 20, 15, 10, 5]
      };

      var options = {
        labelInterpolationFnc: function(value) {
          return value[0]
        },
        donut: true
      };

      var responsiveOptions = [
        ['screen and (min-width: 450px)', {
          chartPadding: 40,
          labelOffset: 50,
          labelDirection: 'explode',
          labelInterpolationFnc: function(value) {
            return value;
          }
        }],
        ['screen and (min-width: 1024px)', {
          chartPadding: 40,
          labelOffset: 60,
        }]
      ];

      new Chartist.Pie('.ct-aws', data, options, responsiveOptions);
      </script>
      <script>
      new Chartist.Bar('.ct-sysad', {
        labels: [
          'AWS, VPS, Heroku',
          'AMI, CentOS',
          'MongoDB, MySQL',
          'Redis, Memcached',
          'Nginx, Apache'
        ],
        series: [
          [70, 50, 70, 60, 70],
          [80, 60, 55, 40, 80],
          [40,  0,  0,  0,  0]
        ]
      }, {
        seriesBarDistance: 10,
        axisX: {
          offset: 60
        },
        axisY: {
          offset: 0,
          labelInterpolationFnc: function(value) {
            return '';
          },
          scaleMinSpace: 15
        }
      }, [
        ['screen and (min-width: 450px)', {
          chartPadding: 20
        }],
        ['screen and (min-width: 1024px)', {
          chartPadding: 40,
        }]
      ]);
      </script>


  </main>
</div>
